// This file is part of www.nand2tetris.org

// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
    Mux16(a=x, b=false, sel=zx, out=x1);
    Not16(in=x1, out=notx1);
    Mux16(a=x1, b=notx1, sel=nx, out=x2);
    
    Mux16(a=y, b=false, sel=zy, out=y1);
    Not16(in=y1, out=noty1);
    Mux16(a=y1, b=noty1, sel=ny, out=y2);

    Add16(a=x2, b=y2, out=addxy);
    And16(a=x2, b=y2, out=andxy);
    Mux16(a=andxy, b=addxy, sel=f, out=out1);
    Not16(in=out1, out=notout1);
    Mux16(a=out1, b=notout1, sel=no, out=out2);
    Or16(a=out2, b=false, out=out,
                        out[0]=o1,
                        out[1]=o2,
                        out[2]=o3,
                        out[3]=o4,
                        out[4]=o5,
                        out[5]=o6,
                        out[6]=o7,
                        out[7]=o8,
                        out[8]=o9,
                        out[9]=o10,
                        out[10]=o11,
                        out[11]=o12,
                        out[12]=o13,
                        out[13]=o14,
                        out[14]=o15,
                        out[15]=o16);
    
    Or(a=o1, b=o2, out=s1);
    Or(a=s1, b=o3, out=s2);
    Or(a=s2, b=o4, out=s3);
    Or(a=s3, b=o5, out=s4);
    Or(a=s4, b=o6, out=s5);
    Or(a=s5, b=o7, out=s6);
    Or(a=s6, b=o8, out=s7);
    Or(a=s7, b=o9, out=s8);
    Or(a=s8, b=o10, out=s9);
    Or(a=s9, b=o11, out=s10);
    Or(a=s10, b=o12, out=s11);
    Or(a=s11, b=o13, out=s12);
    Or(a=s12, b=o14, out=s13);
    Or(a=s13, b=o15, out=s14);
    Or(a=s14, b=o16, out=notselzr);
    Not(in=notselzr, out=selzr);

    Mux(a=false, b=true, sel=selzr, out=zr);
    Mux(a=false, b=true, sel=o16, out=ng);
}